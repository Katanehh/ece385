// This module determines the logic for the game wherein keyboard input must be synced with the timings of the map
// Input will be the keyboard inputs, Position of the ball (X-coordinate), and clock
// Output will be whether or not the user hits accurately 'accurate'

module  game_logic ( input logic Reset, frame_clk, [1:0] circletype, // type determines the color and size of the incoming circle - 0, 1 is blue, 2, 3 is red (0 is small blue, 1 is big blue) (2 is small red, 3 is big red)
		     input logic [7:0] keycode, [9:0] BallX, [9:0] BallS,
                     output logic accurate, out_of_bounds ); // output signal accurate determines that the user input is timed correctly with incoming circle, out_of_bounds defines the incoming circle being already outside the user's target circle (miss) (this signal will inform color mapper to stop displaying it on the screen)
	 
    parameter [9:0] Ball_Target_X = 50; // Target Circle on X axis
    parameter [9:0] Ball_Y_Center=240;  // Center position on the Y axis
    parameter [9:0] Ball_X_Min=0;       // Leftmost point on the X axis
    parameter [9:0] Ball_X_Max=639;     // Rightmost point on the X axis

    logic yes;

    always_ff @ (posedge frame_clk or posedge Reset) //make sure the frame clock is instantiated correctly
    begin: Move_Ball
        if (Reset)  // asynchronous Reset
        begin 
			yes = yes; // we don't care
        end

        else 
        begin 				  
				 //modify to control circle input with the keycode
				unique case (keycode)
					8'h1D : begin // Z
                        			  if (circletype == 0)  // Ball is blue (small)
					           begin
					        	if ((BallX - BallS < 8 + Ball_Target_X) || (BallX + BallS > Ball_Target_X - 8))
								begin
									accurate = 1;
									out_of_bounds = 1;
								end
					          
							else if (BallX + BallS < Ball_Target_X - 8)
								begin
									accurate = 0;
									out_of_bounds = 1;
								end
					      		 else
                               			  		begin
									accurate = 0;
									out_of_bounds = 0;
							    	end
						   end
						end
					        
					8'h1B : begin // X
						  if (circletype == 0)  // Ball is blue (small)
					           begin
					        	if ((BallX - BallS < 8 + Ball_Target_X) || (BallX + BallS > Ball_Target_X - 8))
								begin
									accurate = 1;
									out_of_bounds = 1;
								end
					          
							else if (BallX + BallS < Ball_Target_X - 8)
								begin
									accurate = 0;
									out_of_bounds = 1;
								end
					      		 else
                               			  		begin
									accurate = 0;
									out_of_bounds = 0;
							    	end
						   end
						end

					8'h1D && 8'h1B : begin // Z and X
						  if (circletype == 1)  // Ball is blue (big)
					           begin
					        	if ((BallX - BallS < 8 + Ball_Target_X) || (BallX + BallS > Ball_Target_X - 8))
								begin
									accurate = 1;
									out_of_bounds = 1;
								end
					          
							else if (BallX + BallS < Ball_Target_X - 8)
								begin
									accurate = 0;
									out_of_bounds = 1;
								end
					      		 else
                               			  		begin
									accurate = 0;
									out_of_bounds = 0;
							    	end
						   end
						end

					8'h06 : begin // C
                        			 if (circletype == 2)  // Ball is red (small)
					           begin
					        	if ((BallX - BallS < 8 + Ball_Target_X) || (BallX + BallS > Ball_Target_X - 8))
								begin
									accurate = 1;
									out_of_bounds = 1;
								end
					          
							else if (BallX + BallS < Ball_Target_X - 8)
								begin
									accurate = 0;
									out_of_bounds = 1;
								end
					      		 else
                               			  		begin
									accurate = 0;
									out_of_bounds = 0;
							    	end
						   end
						end
							  
					8'h19 : begin // V
					   if (circletype == 2)  // Ball is red (small)
					           begin
					        	if ((BallX - BallS < 8 + Ball_Target_X) || (BallX + BallS > Ball_Target_X - 8))
								begin
									accurate = 1;
									out_of_bounds = 1;
								end
					          
							else if (BallX + BallS < Ball_Target_X - 8)
								begin
									accurate = 0;
									out_of_bounds = 1;
								end
					      		 else
                               			  		begin
									accurate = 0;
									out_of_bounds = 0;
							    	end
						   end
						end

					8'h06 && 8'h19 : begin // C and V
						  if (circletype == 3)  // Ball is red (big)
					           begin
					        	if (((BallX - BallS < 8 + Ball_Target_X) || (BallX + BallS > Ball_Target_X - 8))
								begin
									accurate = 1;
									out_of_bounds = 1;
								end
					          
							else if (BallX + BallS < Ball_Target_X - 8)
								begin
									accurate = 0;
									out_of_bounds = 1;
								end
					      		 else
                               			  		begin
									accurate = 0;
									out_of_bounds = 0;
							    	end
						   end
						end

					default: ;
			   endcase
			
		end  
    end
      
endmodule
