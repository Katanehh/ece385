//-------------------------------------------------------------------------
//    Color_Mapper.sv                                                    --
//    Stephen Kempf                                                      --
//    3-1-06                                                             --
//                                                                       --
//    Modified by David Kesler  07-16-2008                               --
//    Translated by Joe Meng    07-07-2013                               --
//    Modified by Zuofu Cheng   08-19-2023                               --
//                                                                       --
//    Fall 2023 Distribution                                             --
//                                                                       --
//    For use with ECE 385 USB + HDMI                                    --
//    University of Illinois ECE Department                              --
//-------------------------------------------------------------------------


module  color_mapper ( input  logic [9:0] BallX, BallY, DrawX, DrawY, Ball_size, TargetX, TargetY, TargetS,
                       input logic color, Reset, frame_clk,
                       input logic out_of_bounds,
                       input logic main, playbackground, fail, success, spawn,
                       input logic [3:0] bckr, bckg, bckb,
                       input logic [3:0] failr, failg, failb,
                       input logic [3:0] successr, successg, successb,
                       input logic [3:0] mainr, maing, mainb,
                       output logic [2:0] BallCounter,
                       output logic [3:0]  Red, Green, Blue );
    
    logic ball_on;
    logic Target_on;
	  
    int DistX, DistY, Size;
    assign DistX = DrawX - BallX;
    assign DistY = DrawY - BallY;
    assign Size = Ball_size;
    
    int TDistX, TDistY, TSize;
    assign TDistX = DrawX - TargetX;
    assign TDistY = DrawY - TargetY;
    assign TSize = TargetS;
  
    always_comb
    begin: Ball_on_proc
        if ( (DistX*DistX + DistY*DistY) <= (Size * Size) )
        begin
            if (out_of_bounds == 1)
            begin
                ball_on = 1'b0;
            end
    
            else
                ball_on = 1'b1;
        end
        else 
        begin
            ball_on = 1'b0;
        end
     end 

logic [2:0] ball_counter = 0; // Internal counter for the number of balls drawn

    // Detecting the rising edge of ball_on signal
    logic ball_on_previous;
    always_ff @(posedge frame_clk or posedge Reset) begin
        if (Reset) begin
            ball_counter <= 0;
            ball_on_previous <= 1'b0;
        end else begin
            if (ball_on && !ball_on_previous) begin
                // Increment counter when ball_on goes from 0 to 1
                ball_counter <= ball_counter + 1;
            end
            ball_on_previous <= ball_on;
        end
    end

    // Assign internal counter to output
    assign BallCounter = ball_counter;

     
    always_comb
    begin: Target_on_proc
        if ( (TDistX*TDistX + TDistY*TDistY) <= (TSize * TSize) )
            Target_on = 1'b1;
        else 
            Target_on = 1'b0;
     end  
     
    always_comb
    begin:RGB_Display
        if ((ball_on == 1'b1 && color == 1'b0 && spawn == 1'b1 && playbackground == 1'b1) || (ball_on == 1'b1 && color == 1'b0 && spawn == 1'b0 && playbackground == 1'b1)) begin // blue circle
            Red = 4'h0;
            Green = 4'h0;
            Blue = 4'hf;
        end       
        
        else if ((ball_on == 1'b1 && color == 1'b1 && spawn == 1'b1 && playbackground == 1'b1) || (ball_on == 1'b1 && color == 1'b1 && spawn == 1'b0 && playbackground == 1'b1)) begin  // red circle
            Red = 4'hf;
            Green = 4'h0;
            Blue = 4'h0;
        end 
        
        else if ((Target_on == 1'b1 && spawn == 1'b1 && playbackground == 1'b1) || (Target_on == 1'b1 && spawn == 1'b0 && playbackground == 1'b1)) begin // yellow target circle
            Red = 4'hf;
            Green = 4'hf;
            Blue = 4'h0;
        end
        
        else begin 
            if (main == 1'b1) begin
                Red = mainr; 
                Green = maing;
                Blue = mainb;
            end
            
            else if (fail == 1'b1) begin
                Red = failr; 
                Green = failg;
                Blue = failb;
            end
            
            else if (playbackground == 1'b1) begin
                Red = bckr; 
                Green = bckg;
                Blue = bckb;
            end
            
            else if (success == 1'b1) begin
                Red = successr; 
                Green = successg;
                Blue = successb;
            end
            
            else begin
                Red = 4'h0;
                Green = 4'h0;
                Blue = 4'h0;
            end
        end      
    end 
    
endmodule
